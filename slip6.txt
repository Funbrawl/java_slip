1. Write a Java program to accept ‘n’ integers from the user and store them in a collection.
Display them in the sorted order. The collection should not accept duplicate elements.
(Use a suitable collection). Search for a particular element using predefined search
method in the Collection framework. [15 M]

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class CollectionExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> numbers = new ArrayList<>();

        System.out.print("Enter the number of integers (n): ");
        int n = scanner.nextInt();

        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            int num = scanner.nextInt();
            if (!numbers.contains(num)) {
                numbers.add(num);
            } else {
                System.out.println("Duplicate element detected. Skipping...");
            }
        }

        Collections.sort(numbers);

        System.out.println("Numbers in sorted order:");
        for (int num : numbers) {
            System.out.print(num + " ");
        }
        System.out.println();

        System.out.print("Enter the element to search: ");
        int searchElement = scanner.nextInt();

        if (numbers.contains(searchElement)) {
            System.out.println("Element found in the collection.");
        } else {
            System.out.println("Element not found in the collection.");
        }

        scanner.close();
    }
}


2. Write a java program to simulate traffic signal using threads. [15 M]

public class TrafficSignalSimulator {
    public static void main(String[] args) {
        TrafficSignal trafficSignal = new TrafficSignal();
        
        // Create and start the threads for each signal
        Thread redSignalThread = new Thread(new SignalRunnable(trafficSignal, Signal.RED));
        Thread yellowSignalThread = new Thread(new SignalRunnable(trafficSignal, Signal.YELLOW));
        Thread greenSignalThread = new Thread(new SignalRunnable(trafficSignal, Signal.GREEN));
        
        // Start the threads
        redSignalThread.start();
        yellowSignalThread.start();
        greenSignalThread.start();
    }
}

// Enumeration for different signals
enum Signal {
    RED,
    YELLOW,
    GREEN
}

// Traffic signal class
class TrafficSignal {
    private Signal currentSignal;
    
    public TrafficSignal() {
        currentSignal = Signal.RED; // Start with the red signal
    }
    
    // Method to change the current signal
    public synchronized void changeSignal(Signal newSignal) {
        currentSignal = newSignal;
        System.out.println("Signal changed to " + newSignal);
        notifyAll(); // Notify waiting threads
    }
    
    // Method to get the current signal
    public synchronized Signal getCurrentSignal() {
        return currentSignal;
    }
}

// Runnable class for each signal
class SignalRunnable implements Runnable {
    private TrafficSignal trafficSignal;
    private Signal signal;
    
    public SignalRunnable(TrafficSignal trafficSignal, Signal signal) {
        this.trafficSignal = trafficSignal;
        this.signal = signal;
    }
    
    @Override
    public void run() {
        while (true) {
            synchronized (trafficSignal) {
                try {
                    // Wait until it's the current signal
                    while (trafficSignal.getCurrentSignal() != signal) {
                        trafficSignal.wait();
                    }
                    
                    // Perform action based on the signal
                    switch (signal) {
                        case RED:
                            System.out.println("Stop");
                            Thread.sleep(2000); // Red signal duration
                            trafficSignal.changeSignal(Signal.GREEN);
                            break;
                        case YELLOW:
                            System.out.println("Prepare to stop");
                            Thread.sleep(1000); // Yellow signal duration
                            trafficSignal.changeSignal(Signal.RED);
                            break;
                        case GREEN:
                            System.out.println("Go");
                            Thread.sleep(3000); // Green signal duration
                            trafficSignal.changeSignal(Signal.YELLOW);
                            break;
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
